{"version":3,"sources":["components/TimerSetupComponent.jsx","components/TimerComponent.jsx","App.js","reportWebVitals.js","index.js"],"names":["TimerSetupComponent","time","setTime","label","prefix","type","isTimerRunning","timeLeft","React","useEffect","current","className","id","onClick","disabled","class","Timer","breakLength","sessionLength","setBreakLength","setSessionLength","breakLabel","sessionLabel","setIsTimerRunning","isSession","setIsSession","timeLeftRef","useRef","intervalId","timerLabelRef","formatTime","numberOfSeconds","timeInSeconds","Math","floor","timeInMinutes","ref","startAndStopTimer","clearInterval","setInterval","innerText","audio","document","getElementById","currentTime","play","playBeep","pause","App","useState","preload","src","ReactDOM","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"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","file":"static/js/main.17cf669c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst TimerSetupComponent = ({\r\n  time,\r\n  setTime,\r\n  label,\r\n  type,\r\n  prefix,\r\n  isTimerRunning,\r\n  timeLeft\r\n}) => {\r\n  React.useEffect(() => {\r\n    if (prefix === \"session\") {\r\n      timeLeft.current = time * 60;\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [time]);\r\n\r\n  return (\r\n    <div className='timer-setup'>\r\n      <div id={`${prefix}-label`}>{label}</div>\r\n      <div className=\"controls\">\r\n        <button\r\n          id={`${prefix}-decrement`}\r\n          onClick={() => setTime(time - 1 > 0 ? time - 1 : 1)}\r\n          disabled={isTimerRunning}\r\n        >\r\n          <i class=\"fa fa-minus\" />\r\n        </button>\r\n        <h3 id={`${prefix}-length`}>{time}</h3>\r\n        <button\r\n          id={`${prefix}-increment`}\r\n          onClick={() => {\r\n            setTime(time < 60 ? time + 1 : 60);\r\n          }}\r\n          disabled={isTimerRunning}\r\n        >\r\n          <i class=\"fa fa-plus\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimerSetupComponent;","import React from 'react'\r\n\r\nconst Timer = ({\r\n  breakLength,\r\n  sessionLength,\r\n  setBreakLength,\r\n  setSessionLength,\r\n  breakLabel,\r\n  sessionLabel,\r\n  isTimerRunning,\r\n  setIsTimerRunning,\r\n  isSession,\r\n  setIsSession,\r\n  timeLeft\r\n}) => {\r\n  const timeLeftRef = React.useRef(null);\r\n  const intervalId = React.useRef(null);\r\n  const timerLabelRef = React.useRef(null);\r\n\r\n  const playBeep = () => {\r\n    const audio = document.getElementById(\"beep\");\r\n    audio.currentTime = 0;\r\n    audio.play();\r\n  };\r\n\r\n  const initializeTimer = () => {\r\n    const audio = document.getElementById(\"beep\");\r\n    audio.pause();\r\n    audio.currentTime = 0;\r\n    clearInterval(intervalId.current);\r\n    setIsTimerRunning(false);\r\n    setIsSession(true);\r\n    setBreakLength(5);\r\n    setSessionLength(25);\r\n    timeLeftRef.current.innerText = formatTime(25 * 60);\r\n    timeLeft.current = 0;\r\n  };\r\n\r\n  const startAndStopTimer = () => {\r\n    if (!isTimerRunning) {\r\n      timeLeft.current = timeLeft.current\r\n        ? timeLeft.current\r\n        : isSession\r\n        ? sessionLength * 60\r\n        : breakLength * 60;\r\n\r\n      intervalId.current = setInterval(() => {\r\n        timeLeftRef.current.innerText = formatTime(--timeLeft.current);\r\n\r\n        if (timeLeft.current === 0) {\r\n          clearInterval(intervalId.current);\r\n          playBeep();\r\n          // change session\r\n          timerLabelRef.current.innerText === \"Session\"\r\n            ? setIsSession(false)\r\n            : setIsSession(true);\r\n          timeLeft.current =\r\n            timerLabelRef.current.innerText === \"Session\"\r\n              ? sessionLength * 60 + 1\r\n              : breakLength * 60 + 1;\r\n          startAndStopTimer();\r\n        }\r\n      }, 1000);\r\n    } else {\r\n      clearInterval(intervalId.current);\r\n    }\r\n    isTimerRunning ? setIsTimerRunning(false) : setIsTimerRunning(true);\r\n  };\r\n\r\n  const formatTime = (numberOfSeconds = 25 * 60) => {\r\n    let timeInSeconds = Math.floor(numberOfSeconds % 60);\r\n    let timeInMinutes = Math.floor(numberOfSeconds / 60);\r\n\r\n    return `${timeInMinutes < 10 ? \"0\" + timeInMinutes : timeInMinutes}:${\r\n      timeInSeconds < 10 ? \"0\" + timeInSeconds : timeInSeconds\r\n    }`;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"timer\">\r\n        <h2 id=\"timer-label\" ref={timerLabelRef}>\r\n          {isSession ? sessionLabel : breakLabel}\r\n        </h2>\r\n\r\n        <h2 id=\"time-left\" ref={timeLeftRef}>\r\n          {formatTime(sessionLength * 60)}\r\n        </h2>\r\n\r\n        <div className=\"controls\">\r\n          <button id=\"start_stop\" onClick={startAndStopTimer} className={`${isTimerRunning ? 'playing' : null}`}>\r\n            <i className={`fa fa-${isTimerRunning? 'pause' : 'play'}`} />\r\n          </button>\r\n\r\n          <button id=\"reset\" onClick={initializeTimer}>\r\n            <i className=\"fa fa-sync-alt\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport default Timer;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport TimerSetupComponent from './components/TimerSetupComponent';\nimport Timer from './components/TimerComponent';\n\nimport './App.css';\n  \n  const App = () => {\n    const [breakLength, setBreakLength] = React.useState(5);\n    const [sessionLength, setSessionLength] = React.useState(25);\n    const [isTimerRunning, setIsTimerRunning] = React.useState(false);\n    const [isSession, setIsSession] = React.useState(true);\n    const timeLeft = React.useRef(null);\n  \n    return (\n      <>\n        <h1>Pomodoro Clock</h1>\n        <div className='timer-controls'>\n  \n          <TimerSetupComponent\n            label=\"Break Length\"\n            time={breakLength}\n            setTime={setBreakLength}\n            prefix=\"break\"\n            isTimerRunning={isTimerRunning}\n            timeLeft={timeLeft}\n          />\n          <TimerSetupComponent\n            label=\"Session Length\"\n            time={sessionLength}\n            setTime={setSessionLength}\n            prefix=\"session\"\n            isTimerRunning={isTimerRunning}\n            timeLeft={timeLeft}\n          />\n        </div>\n  \n        <Timer\n          {...{\n            breakLength,\n            sessionLength,\n            setBreakLength,\n            setSessionLength,\n            breakLabel: \"Break\",\n            sessionLabel: \"Session\",\n            isTimerRunning,\n            setIsTimerRunning,\n            isSession,\n            setIsSession,\n            timeLeft\n          }}\n        />\n  \n        <audio\n          id=\"beep\"\n          preload=\"auto\"\n          src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"\n        />\n      </>\n    );\n  };\n  \nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}